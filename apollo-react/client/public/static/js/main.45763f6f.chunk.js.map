{"version":3,"sources":["logo.jpg","components/Launch.js","components/LaunchItem.js","components/MissionKey.js","components/Launches.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","LAUNCH_QUERY","gql","Launch","flight_number","this","props","match","params","parseInt","query","variables","loading","error","data","console","log","launch","mission_name","launch_year","launch_success","rocket","rocket_id","rocket_name","rocket_type","className","classNames","to","Component","LaunchItem","launch_date_local","format","MissionKey","LAUNCHES_QUERY","Launches","launches","map","key","client","ApolloClient","uri","App","src","logo","alt","style","width","display","margin","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.45763f6f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.a0c3f2ce.jpg\";","import React, { Component, Fragment } from \"react\";\r\nimport gql from \"graphql-tag\";\r\nimport { Query } from \"react-apollo\";\r\nimport { Link } from \"react-router-dom\";\r\nimport classNames from \"classnames\";\r\n\r\nconst LAUNCH_QUERY = gql`\r\n    query LaunchQuery($flight_number: Int!) {\r\n        launch(flight_number: $flight_number) {\r\n            flight_number\r\n            mission_name\r\n            launch_year\r\n            launch_success\r\n            launch_date_local\r\n            rocket {\r\n                rocket_id\r\n                rocket_name\r\n                rocket_type\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport class Launch extends Component {\r\n    render() {\r\n\r\n        let { flight_number } = this.props.match.params;\r\n        flight_number = parseInt(flight_number);\r\n\r\n        return (\r\n            <Fragment>\r\n                <Query query={LAUNCH_QUERY} variables={{ flight_number }}>\r\n                    {\r\n                        ({loading, error, data}) => {\r\n                            if(loading) return <h4>Loading...</h4>\r\n                            if(error) console.log(error);\r\n                            \r\n                            const {\r\n                                mission_name, \r\n                                flight_number, \r\n                                launch_year, \r\n                                launch_success,\r\n                                rocket: {\r\n                                    rocket_id,\r\n                                    rocket_name,\r\n                                    rocket_type\r\n                                } \r\n                            } =  data.launch\r\n                            console.log(data);\r\n\r\n                            return <div>\r\n                                <h1 className=\"display-4 my-3\"><span className=\"text-dark\">Mission:</span> {mission_name}</h1>\r\n                                <h4 className=\"mb-3\">Launch Details</h4>\r\n                                <ul className=\"list-group\">\r\n                                    <li className=\"list-group-item\">\r\n                                        Flight Number: {flight_number}\r\n                                    </li>\r\n                                    <li className=\"list-group-item\">\r\n                                        Launch Year: {launch_year}\r\n                                    </li>\r\n                                    <li className=\"list-group-item\">\r\n                                        Launch Successful: <span className={classNames({\r\n                                            \"text-success\": launch_success,\r\n                                            \"text-danger\": !launch_success\r\n                                        })}>{ launch_success ?  \"Yes\" : \"No\" }</span>\r\n                                    </li>\r\n                                </ul>\r\n\r\n                                <h4 className=\"my-3\">Rocket Details</h4>\r\n                                <ul className=\"list-group\">\r\n                                    <li className=\"list-group-item\">Rocket ID: {rocket_id}</li>\r\n                                    <li className=\"list-group-item\">Rocket Name: {rocket_name}</li>\r\n                                    <li className=\"list-group-item\">Rocket Type: {rocket_type}</li>\r\n                                </ul>\r\n                                <hr/>\r\n                                <Link to=\"/\" className=\"btn btn-secondary\">Back</Link>\r\n                            </div>\r\n                        }\r\n                    }\r\n                </Query>\r\n            </Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Launch\r\n","import React from \"react\";\r\nimport classNames from \"classnames\";\r\nimport Moment from \"react-moment\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport default function LaunchItem(\r\n    { \r\n        launch: { \r\n            flight_number, \r\n            mission_name, \r\n            launch_date_local, \r\n            launch_success\r\n        }\r\n    }) {\r\n    return <div className=\"card card-body mb-3\">\r\n        <div className=\"col-md-9\">\r\n            <h4>Mission: <span className={classNames({\r\n                \"text-success\": launch_success,\r\n                \"text-danger\": !launch_success\r\n            })}>{ mission_name }</span></h4>\r\n            <p>Date: <Moment format=\"YYYY-MM-DD hh:mm\">{ launch_date_local }</Moment></p>\r\n        </div>\r\n        <div className=\"col-md-3\">\r\n            <Link to={`/launch/${flight_number}`} className=\"btn btn-secondary\">\r\n                Launch Details\r\n            </Link>\r\n        </div>\r\n    </div>\r\n}\r\n","import React from 'react'\r\n\r\nexport default function MissionKey() {\r\n    return (\r\n        <div className=\"my-3\">\r\n            <p>\r\n                <span className=\"px-3 mr-2 bg-success\"/> Success\r\n            </p>\r\n            <p>\r\n                <span className=\"px-3 mr-2 bg-danger\"/> Failure\r\n            </p>\r\n        </div>\r\n    )\r\n}\r\n","import React, { Component, Fragment } from \"react\";\r\nimport gql from \"graphql-tag\";\r\nimport { Query } from \"react-apollo\";\r\nimport LaunchItem from \"./LaunchItem\";\r\nimport MissionKey from \"./MissionKey\";\r\n\r\nconst LAUNCHES_QUERY = gql`\r\n    query LaunchesQuery {\r\n        launches {\r\n            flight_number\r\n            mission_name\r\n            launch_date_local\r\n            launch_success\r\n        }\r\n    }\r\n`;\r\n\r\nexport class Launches extends Component {\r\n    render() {\r\n        return (\r\n            <Fragment>\r\n                <h1 className=\"display-4 my-3\">Launches</h1>\r\n                <MissionKey />\r\n                <Query query={LAUNCHES_QUERY}>\r\n                    {\r\n                        ({ loading, error, data }) => {\r\n                            if(loading) return <h4>Loading...</h4>\r\n                            if(error) console.log(error);\r\n                            console.log(data);\r\n\r\n                            return <Fragment>\r\n                                {\r\n                                    data.launches.map(launch => (\r\n                                        <LaunchItem key={launch.flight_number} launch={launch} />\r\n                                    ))\r\n                                }\r\n                            </Fragment>\r\n                        }\r\n                    }\r\n                </Query>\r\n            </Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Launches\r\n","import React from \"react\";\r\nimport ApolloClient from \"apollo-boost\";\r\nimport { ApolloProvider } from \"react-apollo\";\r\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\r\nimport Launch from \"./components/Launch\"\r\nimport Launches from \"./components/Launches\";\r\nimport \"./App.css\";\r\nimport logo from \"./logo.jpg\";\r\n\r\nconst client = new ApolloClient({\r\n  uri: \"/graphql\"\r\n});\r\n\r\nfunction App() {\r\n  return (\r\n    <ApolloProvider client={client}>\r\n      <Router>\r\n        <div className=\"container\">\r\n          <img \r\n            src={logo} \r\n            alt=\"SpaceX\" \r\n            style={{ width: 300, display: \"block\", margin: \"auto\" }}\r\n          />\r\n          <Route exact path=\"/\" component={Launches} />\r\n          <Route exact path=\"/launch/:flight_number\" component={Launch} />\r\n        </div>\r\n      </Router>\r\n      \r\n    </ApolloProvider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}