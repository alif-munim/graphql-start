{"version":3,"sources":["Logo.PNG","components/Spin.js","components/SinglePokemon.js","components/MultiPokemon.js","components/Home.js","components/EvolutionChain.js","components/Species.js","components/PokeStat.js","components/PokemonInfo.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","antIcon","LoadingOutlined","style","fontSize","spin","Spinner","indicator","SinglePokemon","name","SINGLE_QUERY","gql","className","query","variables","loading","error","data","Spin","console","log","singlePokemon","id","sprites","types","src","front_default","alt","height","map","entry","key","type","color","classNames","text","to","MULTI_QUERY","MultiPokemon","num","search","useEffect","filteredPokemon","multiPokemon","filter","obj","startsWith","index","Home","ALL_POKEMON_QUERY","useState","displayNum","setDisplayNum","searchValue","setSearchValue","options","setOptions","pokemonArr","onSelect","onChange","forEach","pokemon","push","value","width","onSearch","searchText","slice","pokemonObj","e","parseInt","target","min","max","EVOLUTION_QUERY","EvolutionChain","url","evolutions","chainObj","evolutionChain","chain","species","evolves_to","length","SPECIES_QUERY","Species","description","pokemonSpecies","evolution_chain","flavor_text_entries","i","language","flavor_text","PokeStat","statistics","gutter","statObj","stat","span","title","base_stat","INFO_QUERY","PokemonInfo","this","props","match","params","back_default","stats","typeObj","Component","client","ApolloClient","uri","App","Logo","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.4f82ab07.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Logo.4c06b969.PNG\";","import React from 'react';\r\nimport { Spin } from 'antd';\r\nimport 'antd/dist/antd.css';\r\nimport { LoadingOutlined } from '@ant-design/icons';\r\n\r\nconst antIcon = <LoadingOutlined style={{ fontSize: 24 }} spin />;\r\n\r\nconst Spinner = () => {\r\n    return (\r\n        <div>\r\n            <Spin indicator={antIcon} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Spinner\r\n","import React, { Fragment } from \"react\";\r\nimport gql from \"graphql-tag\";\r\nimport { Query } from \"react-apollo\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Badge } from 'antd';\r\nimport 'antd/dist/antd.css';\r\nimport classNames from \"classnames\";\r\nimport Spin from \"./Spin\"\r\n\r\nexport default function SinglePokemon({\r\n    name\r\n}) {\r\n\r\n    const SINGLE_QUERY = gql`\r\n        query SingleQuery($name: String!) {\r\n            singlePokemon(id: $name) {\r\n                name\r\n                id\r\n                sprites {\r\n                    front_default\r\n                }\r\n                types {\r\n                    type {\r\n                        name\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    `;\r\n\r\n    return (\r\n        <div className=\"card card-body mb-3\">\r\n            <Query query={SINGLE_QUERY} variables={{ name }}>\r\n                {\r\n                    ({loading, error, data}) => {\r\n                        if (loading) return <div className=\"my-center\">\r\n                            <Spin/>\r\n                        </div>\r\n                        if (error) console.log(error)\r\n\r\n                        const {\r\n                            name,\r\n                            id,\r\n                            sprites,\r\n                            types\r\n                        } = data.singlePokemon\r\n\r\n                        return <Fragment>\r\n                            <div className=\"media\">\r\n                                <img className=\"d-flex mr-3\" src={sprites.front_default} alt={name} height=\"150\"/>\r\n                                <div className=\"media-body\">\r\n                                    <h5 className=\"mt-3\">\r\n                                    <span className=\"text-dark\">{id}:</span> {name}\r\n                                    </h5>\r\n                                    {\r\n                                        types.map(entry => (\r\n                                            <div key={entry.type.name}>\r\n                                                <Badge color={classNames({ \r\n                                                    \"#f78c52\": entry.type.name == \"fire\", \r\n                                                    \"#70ad6d\": entry.type.name == \"grass\",\r\n                                                    \"#ac4af7\": entry.type.name == \"poison\",\r\n                                                    \"#4aa1f7\": entry.type.name == \"water\",\r\n                                                    \"#58826a\": entry.type.name == \"bug\",\r\n                                                    \"#9ee4ff\": entry.type.name == \"flying\",\r\n                                                    \"#ffdf78\": entry.type.name == \"normal\",\r\n                                                    \"#ffd769\": entry.type.name == \"electric\",\r\n                                                    \"#cfa165\": entry.type.name == \"ground\",\r\n                                                    \"#918e8a\": entry.type.name == \"rock\",\r\n                                                    \"#a02aa8\": entry.type.name == \"psychic\",\r\n                                                    \"#ade5ff\": entry.type.name == \"ice\",\r\n                                                    \"#352166\": entry.type.name == \"ghost\",\r\n                                                    \"#89c992\": entry.type.name == \"steel\",\r\n                                                    \"#ff9626\": entry.type.name == \"dragon\",\r\n                                                    \"#47494d\": entry.type.name == \"dark\",\r\n                                                    \"#e685ed\": entry.type.name == \"fairy\",\r\n                                                    \"#bd2d28\": entry.type.name == \"fighting\",\r\n                                                })} text={entry.type.name} />\r\n                                            </div>\r\n                                        ))\r\n                                    }\r\n                                    <Link to={`/pokemon/${name}`} className=\"btn btn-primary mt-2\">Details</Link>\r\n                                </div>\r\n                                \r\n                            </div>\r\n                        </Fragment>\r\n                    }\r\n                }\r\n            </Query>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React, { Component, Fragment, useEffect } from \"react\";\r\nimport { Query } from \"react-apollo\";\r\nimport gql from \"graphql-tag\";\r\nimport Spin from \"./Spin\";\r\n\r\nimport SinglePokemon from \"./SinglePokemon\";\r\n\r\nconst MULTI_QUERY = gql`\r\n    query MultiPokemonQuery($num: Int!){\r\n        multiPokemon(limit: $num) {\r\n            name\r\n            url\r\n        }\r\n    }\r\n`;\r\n\r\nexport default function MultiPokemon({\r\n    num, search\r\n}) {\r\n\r\n    useEffect(() => {\r\n    }, [num, search]);\r\n\r\n    return (\r\n        <div>\r\n            <Query query={MULTI_QUERY} variables={{ num }}> \r\n                {\r\n                    ({loading, error, data}) => {\r\n                        if (loading) return <div className=\"my-center\">\r\n                            <Spin/>\r\n                        </div>\r\n                    \r\n                        if (error) console.log(error);\r\n\r\n                        if (search != null) {\r\n                            \r\n                            const filteredPokemon = data.multiPokemon.filter(obj => obj.name.startsWith(search));\r\n\r\n                            return <div className=\"container\">\r\n                                {\r\n                                    filteredPokemon.map((data, index) => (\r\n                                        <SinglePokemon key={index} name={data.name}/>\r\n                                ))\r\n                                }\r\n                            </div>\r\n                        } else {\r\n                            return <div className=\"container\">\r\n                            {\r\n                                data.multiPokemon.map((data, index) => (\r\n                                    <SinglePokemon key={index} name={data.name}/>\r\n                               ))\r\n                            }\r\n                        </div>\r\n                        }\r\n        \r\n                    }\r\n                }\r\n            </Query>\r\n        </div>\r\n    )\r\n}","import React, { useState } from \"react\";\r\nimport MultiPokemon from \"./MultiPokemon\";\r\nimport gql from \"graphql-tag\";\r\nimport { Query } from \"react-apollo\";\r\nimport { AutoComplete } from 'antd';\r\nimport 'antd/dist/antd.css';\r\nimport Spin from \"./Spin\";\r\n\r\nfunction Home() {\r\n\r\n    const ALL_POKEMON_QUERY = gql`\r\n        query allPokemonQuery {\r\n            multiPokemon(limit: 900) {\r\n                name\r\n            }\r\n        }\r\n    `;\r\n\r\n    const [displayNum, setDisplayNum] = useState(10);\r\n    const [searchValue, setSearchValue] = useState(\"\");\r\n    const [options, setOptions] = useState([]);\r\n\r\n    const pokemonArr = [];\r\n\r\n    const onSelect = data => {\r\n        setSearchValue(data);\r\n    };\r\n\r\n    const onChange = data => {\r\n        setSearchValue(data);\r\n    };\r\n\r\n    return (\r\n        <div>          \r\n            <div className=\"container mb-5\"> \r\n                <form className=\"form-inline justify-content-center\">\r\n                    <Query query={ALL_POKEMON_QUERY}>\r\n                    {\r\n                        ({loading, error, data}) => {\r\n                            if (loading) return <div className=\"my-center\">\r\n                                <Spin/>\r\n                            </div>\r\n                            if (error) console.log(error);\r\n\r\n                            data.multiPokemon.forEach(pokemon => {\r\n                                pokemonArr.push({\r\n                                    value: pokemon.name\r\n                                });\r\n                            });                    \r\n\r\n                            return <div>\r\n                                <AutoComplete\r\n                                    className=\"form-control mb-2 mr-sm-2\"\r\n                                    options={options}\r\n                                    style={{\r\n                                    width: 200,\r\n                                    }}\r\n                                    onSelect={onSelect}\r\n                                    onSearch={(searchText) => {\r\n                                        setOptions(\r\n                                            pokemonArr\r\n                                                .slice(0, displayNum + 1)\r\n                                                .filter(pokemonObj => \r\n                                                    pokemonObj.value\r\n                                                    .startsWith(searchText)\r\n                                                )\r\n                                        );\r\n                                    }}\r\n                                    onChange={onChange}\r\n                                />\r\n                            </div>\r\n                        }\r\n                    }\r\n                    </Query>\r\n                    <input \r\n                    onChange={e=> {\r\n                        setDisplayNum(parseInt(e.target.value));\r\n                    }}\r\n                    className=\"form-control mb-2 mr-sm-2\" \r\n                    type=\"number\" \r\n                    id=\"quantity\" \r\n                    name=\"quantity\" \r\n                    min=\"1\" \r\n                    max=\"100\"\r\n                    value={displayNum}\r\n                    />\r\n                </form>\r\n            </div>\r\n            <MultiPokemon num={displayNum} search={searchValue} />\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\nexport default Home\r\n","import React from \"react\";\r\nimport gql from \"graphql-tag\";\r\nimport { Query } from \"react-apollo\";\r\nimport SinglePokemon from \"./SinglePokemon\"\r\nimport Spin from \"./Spin\";\r\n\r\nconst EVOLUTION_QUERY = gql`\r\n    query evolutionQuery($url: String!) {\r\n        evolutionChain(url: $url) {\r\n            chain {\r\n                evolves_to {\r\n                    evolves_to {\r\n                        species {\r\n                            name\r\n                            url\r\n                        }\r\n                    }\r\n                    species {\r\n                        name\r\n                        url\r\n                    }\r\n                }\r\n                species {\r\n                    name\r\n                    url\r\n                }\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const EvolutionChain = ({ url }) => {\r\n    return (\r\n        <div>\r\n            <Query query={EVOLUTION_QUERY} variables={{ url }}>\r\n                {\r\n                    ({loading, error, data}) => {\r\n                        if (loading) return <div className=\"my-center\">\r\n                            <Spin/>\r\n                        </div>\r\n                        if (error) console.log(error);\r\n\r\n                        const evolutions = [];\r\n                        const chainObj = data.evolutionChain.chain;\r\n                        // console.log(chainObj);\r\n\r\n                        evolutions.push(chainObj.species.name);\r\n                        if (chainObj.evolves_to != null && chainObj.evolves_to.length > 0) {\r\n                            evolutions.push(chainObj.evolves_to[0].species.name);\r\n\r\n                            if (chainObj.evolves_to[0].evolves_to != null && chainObj.evolves_to[0].evolves_to.length > 0) {\r\n                                evolutions.push(chainObj.evolves_to[0].evolves_to[0].species.name);\r\n                            }\r\n                        }\r\n                        \r\n                        \r\n\r\n                        // console.log(evolutions);\r\n\r\n                        return <div className=\"mb-5\">\r\n                            {\r\n                                evolutions.map(pokemon => (\r\n                                    <SinglePokemon key={pokemon} name={pokemon}/>\r\n                                ))\r\n                            }\r\n                        </div>\r\n                    }\r\n                }\r\n            </Query>\r\n        </div>\r\n    )\r\n}\r\n","import React from \"react\";\r\nimport gql from \"graphql-tag\";\r\nimport { Query } from \"react-apollo\";\r\nimport { EvolutionChain } from \"./EvolutionChain\";\r\nimport ProgressBar from \"./Progress\";\r\nimport Spin from \"./Spin\";\r\n\r\nconst SPECIES_QUERY = gql`\\\r\n    query speciesQuery($url: String!) {\r\n        pokemonSpecies(url: $url) {\r\n            evolution_chain {\r\n                url\r\n            }\r\n            flavor_text_entries {\r\n                flavor_text\r\n                language {\r\n                    name\r\n                    url\r\n                }\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport default function Species({ url }) {\r\n    return (\r\n        <div>\r\n            <Query query={SPECIES_QUERY} variables={{ url }}>\r\n                {\r\n                    ({loading, error, data}) => {\r\n                        if (loading) return <div className=\"my-center\">\r\n                            <Spin/>\r\n                        </div>\r\n                        if (error) console.log(error);\r\n\r\n                        const {\r\n                            evolution_chain,\r\n                            flavor_text_entries\r\n                        } = data.pokemonSpecies;\r\n\r\n                        let description;\r\n\r\n                        for (let i = 0; i < flavor_text_entries.length; i++) {\r\n                            if (flavor_text_entries[i].language.name == \"en\") {\r\n                                description = flavor_text_entries[i].flavor_text;\r\n                            }\r\n                        }\r\n\r\n                        return <div>\r\n                            <div className=\"mb-5\">\r\n                                <h4 className=\"mb-3\">Description</h4>\r\n                                <p className=\"text-primary\"></p>\r\n                                <div className=\"card\">\r\n                                    <div className=\"card-body\">\r\n                                        {description}\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                            \r\n                            <h4 className=\"mb-3\">Evolution Chain</h4>\r\n                            <EvolutionChain url={evolution_chain.url}/>\r\n                        </div>\r\n                    }\r\n                }\r\n            </Query>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React from 'react'\r\nimport { Statistic, Row, Col, Button } from 'antd';\r\nimport 'antd/dist/antd.css';\r\n\r\nfunction PokeStat({\r\n    statistics\r\n}) {\r\n\r\n    return (\r\n        <div>\r\n            <Row gutter={16}>\r\n                {\r\n                    statistics.map(statObj => (\r\n                        <Col key={statObj.stat.name} span={12}>\r\n                            <Statistic title={statObj.stat.name} value={statObj.base_stat} />\r\n                        </Col>\r\n                        ))\r\n                }\r\n            </Row>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PokeStat\r\n","import React, { Component, Fragment } from \"react\";\r\nimport gql from \"graphql-tag\";\r\nimport { Query } from \"react-apollo\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Species from \"./Species\";\r\nimport PokeStat from \"./PokeStat\";\r\nimport Spin from \"./Spin\";\r\n\r\nconst INFO_QUERY = gql`\r\n    query InfoQuery($name: String!) {\r\n        singlePokemon(id: $name) {\r\n            name\r\n            id\r\n            sprites {\r\n                front_default\r\n                back_default\r\n            }\r\n            types {\r\n                type {\r\n                    name\r\n                }\r\n            }\r\n            stats {\r\n                base_stat\r\n                stat {\r\n                    name\r\n                }\r\n            }\r\n            species {\r\n                name\r\n                url\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport class PokemonInfo extends Component {\r\n    render() {\r\n\r\n        let { name } = this.props.match.params;\r\n\r\n        return (\r\n            <div className=\"container\">\r\n                <Query query={INFO_QUERY} variables={{ name }}>\r\n                    {\r\n                        ({loading, error, data}) => {\r\n                            if (loading) return <div className=\"my-center\">\r\n                                <Spin/>\r\n                            </div>\r\n                            if (error) return console.log(error)\r\n\r\n                            const {\r\n                                name,\r\n                                id,\r\n                                sprites: {\r\n                                    front_default,\r\n                                    back_default\r\n                                },\r\n                                types,\r\n                                stats,\r\n                                species\r\n                            } = data.singlePokemon;\r\n                            \r\n\r\n                            return <div>\r\n                                <h1 className=\"display-4 my-3\">\r\n                                    <span className=\"text-dark\">{id}:</span> { name }\r\n                                </h1>\r\n\r\n                                <h4 className=\"mb-3\">Sprites</h4>\r\n                                <img src={front_default} height=\"250\"/>\r\n                                <img src={back_default} height=\"250\"/>\r\n\r\n                                <Species url={species.url} />\r\n\r\n                                <h4 className=\"mb-3\">Types</h4>\r\n                                <ul className=\"list-group mb-5\">\r\n                                    {\r\n                                        types.map(typeObj => (\r\n                                        <li key={typeObj.type.name} className=\"list-group-item\">{typeObj.type.name}</li>\r\n                                        ))\r\n                                    }\r\n                                \r\n                                </ul>\r\n\r\n                                <h4 className=\"mb-3\">Stats</h4>\r\n                                <div className=\"card mb-5\">\r\n                                    <div className=\"card-body\">\r\n                                        <PokeStat statistics={stats}/>\r\n                                    </div>\r\n                                </div>\r\n                                \r\n                                <Link to=\"/\" className=\"btn btn-secondary mb-5\">Back</Link>\r\n                            </div>\r\n                        }\r\n                    }\r\n                </Query>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default PokemonInfo\r\n","import React from \"react\";\r\nimport ApolloClient from \"apollo-boost\";\r\nimport { ApolloProvider } from \"react-apollo\";\r\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\r\nimport Home from \"./components/Home\";\r\nimport MultiPokemon from \"./components/MultiPokemon\";\r\nimport PokemonInfo from \"./components/PokemonInfo\";\r\nimport \"./App.css\";\r\nimport Logo from \"./Logo.PNG\";\r\n\r\nconst client = new ApolloClient({\r\n  uri: \"/graphql\"\r\n});\r\n\r\n\r\nfunction App() {\r\n\r\n  return (\r\n    <ApolloProvider client={client}>\r\n      <Router>\r\n          <Link to=\"/\">\r\n            <div className=\"my-center my-3\">\r\n              <img width=\"85%\" src={Logo}/>\r\n            </div>\r\n            \r\n          </Link>\r\n          <Route exact path=\"/\" component={Home}/>\r\n          <Route exact path=\"/pokemon/:name\" component={PokemonInfo} />\r\n      </Router>\r\n    </ApolloProvider>\r\n    \r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}